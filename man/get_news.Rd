% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_news.R
\name{get_news}
\alias{get_news}
\title{Retrieve news articles}
\usage{
get_news(query, from = NULL, to = NULL, language = "en",
  limit = 100, api_token = NULL, ua = NULL)
}
\arguments{
\item{query}{Character string, specifying the query to be searched when
  calling the Newsriver API. Many fields of retrieved articles can be
  searched, but \code{query} should only be used to search the
  \emph{title} and \emph{text} fields (other fields are handled by default
  or specified as separate parameters to \code{get_news}). Search queries
  must be valid
  \href{https://lucene.apache.org/core/2_9_4/queryparsersyntax.html}{Lucene query strings}.

  To build valid search queries, search terms can be passed into the
  \emph{title} and \emph{text} fields using a colon. For example, to search
  for any articles containing the word "Google" in the text, use
  \code{query = "text:Google"}, or to search for any articles with "Twitter"
  in the title use \code{query = "title:Twitter"}. Multiple search
  terms/fields can be placed together separated by "OR", "AND", and "NOT"
  operators (which perform as expected) to build more complex queries. To
  group multiple search terms in one field, use parentheses. For example, to
  search for any articles that contain "Google" in the title, \strong{and}
  "Cloud" \strong{or} "BigQuery" in the text, use
  \code{query = "title:Google AND text:(Cloud OR BigQuery)"}.

  To search exact phrases, use double quotes. To do this, either wrap single
  quotes around a search query using double quotes, e.g.,
  \code{query = 'title:"RStudio Connect"'} or escape each internal double
  quote with a single backslash, e.g., \code{query = "\"RStudio Connect\""}.
  \strong{Note:} (i) search queries are case sensitive, (ii) spaces behave
  like OR operators, (iii) encoded queries cannot exceed 414 characters. For
  more examples and information on building queries, see the official
  \href{https://console.newsriver.io/code-book}{Newsriver Code Book}.}

\item{from, to}{Character string, specifying the date range of your search.
Must be in the "\%Y-\%m-\%d" format. \code{to} defaults to the current date
and \code{from} defaults to one month prior that (i.e., the past month).
\strong{Note:} Newsriver can only retrieve articles from the past year.}

\item{language}{Character string, specifying the language of the articles to
return. Must be in the
\href{https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes}{ISO 639-1}
two-letter code format (e.g., "en", "it", "es", etc.).}

\item{limit}{Integer, specifying the maximum number of results to return
\emph{per} day between the supplied \code{to} and \code{from} dates.
Accepts values from 1 to 100 (e.g., a search period of 10 days can return
a maximum of 1000 articles).}

\item{api_token, ua}{Character string, specifying a Newsriver API token and
user agent. Defaults to the values set using \code{\link{store_creds}}.}
}
\description{
\code{get_news} returns news articles from the Newsriver API matching a user
provided search query.
}
\details{
\strong{Search queries}

\code{get_news} calls the Newsriver API by generating custom HTTP GET
requests. These requests are composed of multiple query parameters (see the
Newsriver API
\href{https://console.newsriver.io/river/0/doc}{reference manual}). While
many search fields of the Newsriver \emph{query} parameter can be searched,
the \code{query} parameter of \code{get_news} should only be used to search
the \emph{title} and \emph{text} fields of new articles. This is because
other fields are handled by default or passed as alternate arguments to
\code{get_news} (e.g., \emph{language}).

\strong{Date sequences}

Results from the Newsriver API are limited to a maximum of 100 articles per
GET request. In order to return the maximum number of results,
\code{get_news} creates a sequence of search dates, by day, specified between
the \code{from} and \code{to} parameters. Each search date from the sequence
is then combined with the other query parameters to create a unique GET
request for that date. The results from each GET request are then combined
and returned.

\strong{Rate limiting}

Rate limiting is handled automatically by \code{get_news}.
}
\examples{
\dontrun{
get_news("Google")

get_news("title:Google", language = "es", limit = 50)

get_news("title:\\"Google Cloud\\"", from = "2018-12-01", to = "2019-05-01")

get_news("title:Google AND text:\\"Google Cloud\\"")
}

}
